********** Report of Practical 2 **********


--   This practical consists of the implementation in C language of the Shell sort algorithm that, given an array of lenght n initialized in ascending, descending or random order, orders its elements from the smallest to the biggest one.
Then, the execution times for each algorithm are measured and analysed.

The pseudocode of the algorithm is as follows:

procedure sort (var v[1..n])
    increments:=[88573,29524,9841,3280,1093,364,121,40,13,4,1];
    foreach incr in increments do
        for i:=incr+1 to n do
            temp:=v[i];
            j:=i;
            while j>=incr and v[j-incr]>temp do
                v[j]:=v[j-incr];
                j:=j-incr
            end while;
            v[j]:=temp
        end for
end procedure


-- The computer used for the measurements is the lago_123 from the practice labs

--   In order to facilitate the choice of a stable table, we run the measurement five times and display all the results.

--   The execution times are measured in microseconds (t(n)).

-- Since code from the previous assignment is being reused, a makefile and a .h file help us compile and execute the code.

**** Implementation ****

*Done by passing from pseudocode to C

**** Obtained results ****

Random initialization
7, -2, -4, 0, 1, 3, -8, -10, -9, -6, 
sorted? 0
Shell sort
-10, -9, -8, -6, -4, -2, 0, 1, 3, 7, 
sorted? 1
Ascending initialization
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
sorted? 1
Shell sort
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
sorted? 1
Descending initialization
10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 
sorted? 0
Shell sort
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
sorted? 1


*Notes: The times measured with loops are indicated by * and each loop has 1000 iterations.
----------------------------------------------------------INSORT---------------------------------

-> Table Insort: Random initialization:
Shell sort: Random initialization

           n            t(n)      t(n)/f(n)      t(n)/g(n)      t(n)/h(n)
          10        0.34000*      0.0340000      0.0214525      0.0135356

         100        5.69300*      0.0569300      0.0226642      0.0090228

        1000       97.50300*      0.0975030      0.0244916      0.0061520

       10000     1476.00000       0.1476000      0.0233930      0.0037075

      100000    21679.00000       0.2167900      0.0216790      0.0021679
                                            CONST (0.021,0.025)

-> There are no anomalous measurements in this table

For the Shell sort algorithm applied to a random initialization, these bounds are proposed:
    - f(n) = n as the underestimated bound.
    - g(n) = n^1.2 as the tight bound.
    - h(n) = n^1.4 as the overestimated bound.

As n approaches infinity:
    - t(n)/f(n) tends to infinity
    - t(n)/g(n) tends to CONST (0.021,0.025)
    - t(n)/h(n) tends to 0

So O(n) = n^1.2

Shell sort: Descending initialization

           n            t(n)      t(n)/f(n)      t(n)/g(n)      t(n)/h(n)
          10        0.19100*      0.0302715      0.0151717      0.0076038

         100        1.77600*      0.0446111      0.0112058      0.0028148

        1000       29.17500*      0.1161478      0.0146221      0.0018408

       10000      411.81400*      0.2598371      0.0163946      0.0010344

      100000     4958.00000       0.4958000      0.0156786      0.0004958

                                            CONST (0.0145,0.0165)

-> The second value of t(n)/g(n) can be considered an anomalous measurements in an otherwise
uniform table.

For the Shell sort algorithm applied to a descending initialization, these bounds are proposed:
    - f(n) = n^0.8 as the underestimated bound.
    - g(n) = n^1.1 as the tight bound.
    - h(n) = n^1.4 as the overestimated bound.

As n approaches infinity:
    - t(n)/f(n) tends to infinity
    - t(n)/g(n) tends to CONST (0.0145,0.0165)
    - t(n)/h(n) tends to 0

So O(n) = n^1.1

Shell sort: Ascending initialization

           n            t(n)      t(n)/f(n)      t(n)/g(n)      t(n)/h(n)
          10        0.12200*      0.0180451      0.0090440      0.0045327

         100        1.23800*      0.0270845      0.0068033      0.0017089

        1000       18.36300*      0.0594215      0.0074807      0.0009418

       10000      247.87900*      0.1186423      0.0074858      0.0004723

      100000     3174.00000       0.2247020      0.0071057      0.0002247

                                            CONST (0.071,0.075)

-> The first and even second values for t(n)/g(n) can be considered anomalous measurements in an
otherwise uniform table.

For the Shell sort algorithm applied to a random initialization, these bounds are proposed:
    - f(n) = n^0.83 as the underestimated bound.
    - g(n) = n^1.13 as the tight bound.
    - h(n) = n^1.43 as the overestimated bound.

As n approaches infinity:
    - t(n)/f(n) tends to infinity
    - t(n)/g(n) tends to a constant near CONST (0.071,0.075)
    - t(n)/h(n) tends to 0

So O(n) = n^1.13
                                                                
*************************************************************** CONCLUSIONS ******************************************************************************
With the obtained results, we can conclude for the Shell sort algorithm that the best case is the descending initialization, the average case is the ascending inicialization and the worst case is the random initialization.

(************ Authors: Daniel Quintill√°n (daniel.quintillan)************)
